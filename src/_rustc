#compdef rustc

_rustc() {
    local -a opt_flags opt_vals lints
    typeset -A opt_args

    opt_flags=(
        '(1 *)'{-h,--help}'[show help message]' # `--help` can be combined with `--verbose` and `-Z unstable-options`.
        '(1 *)'{-V,--version}'[show version information]' # `--version` can be combined with `--verbose`
        {-v,--verbose}'[use verbose output]'
        '-g[equivalent to -C debuginfo=2]'
        '-O[equivalent to -C opt-level=2]'
        '--test[build a test harness]'
    )

    opt_vals=(
        '-L+[add a directory to the library search path]: :_rustc_library_path'
        '-l+[link the generated crate(s) to the specifiy native library name]: :_rustc_library_link'
        '--cfg=[configure the compilation environment]:spec'
        '--crate-type=[comma separated list of types of crates for the compiler to emit]: :_rustc_crate_types'
        '--crate-name=[specify the name of the crate being built]:crate name'
        '--edition=[specify the edition of the compiler to use when compiling code]:edition:(2015 2018)'
        '--emit=[comma separated list of types of output for the compiler to emit]: :_rustc_emit_types'
        '--print=[compiler information to print on stdout]: :_rustc_print_info'
        '-o+[write output to filename]:filename'
        '--out-dir=[write output to compiler chosen filename in dir]:dir:_files -/'
        '--explain=[provide a detailed explanation of an error message]:error'
        '--target=[target triple for which the code is compiled]: :_rustc_target_triples'
        '--cap-lints=[sets the most restrictive lint level]:level:(allow warn deny forbid)'
        '--extern[specify where an external rust library is located]: :_rustc_extern_path'
        '--sysroot=[override the system root]:path:_files -/'
        '--error-format=[how errors and other messages are produced]:format:(human json short)'
        '--json=[configure the JSON output of the compiler]:config'
        '--color=[configure coloring of output]: :_rustc_color_types'
        '--pretty=[pretty-print the input instead of compiling]: :_rustc_pretty_types'
        '--remap-path-prefix[remap source names in all output (compiler messages and output files)]:from=to'
    )

    lints=(
        '*'{-W+,--warn=}'[set lint warning]: :_rustc_lint_options'
        '*'{-A+,--allow=}'[set lint allowed]: :_rustc_lint_options'
        '*'{-D+,--deny=}'[set lint denied]: :_rustc_lint_options'
        '*'{-F+,--forbid=}'[set lint forbidden]: :_rustc_lint_options'
    )

    _arguments -s -S $opt_flags $opt_vals $lints \
        '*-Z+[set unstable compiler options]: :_rustc_unstable_options' \
        '*'{-C+,--codegen}'[set codegen options]: :_rustc_codegen_options' \
        '1: :_files -g "*.rs"'
}

_rustc_library_path() {
    local files='path:_files -/'

    local -a kinds
    kinds=(
        "dependency:$files"
        "crate:$files"
        "native:$files"
        "framework:$files"
        "all:$files"
    )

    _values 'library kind' $kinds
    _files '-/'
}

_rustc_library_link() {
    # TODO: Look into searching library path to list libraries.

    local -a kinds
    kinds=(
        "static:"
        "framework:"
        "dylib:"
    )

    _values 'library kind' $kinds
}

_rustc_color_types() {
    local -a colors
    colors=(
        'auto[colorize (default if output goes to tty)]'
        'always[always colorize output]'
        'never[never colorize output]'
    )

    _values 'color' $colors
}

_rustc_pretty_types() {
    local -a pretty_types
    pretty_types=(
        'normal[un-annotated source]'
        'expanded[crates expanded]'
        'expanded,identified[fully parenthesized, AST nodes with IDs]'
    )

    _values 'type' $pretty_types
}

_rustc_crate_types() {
    local -a crate_types
    crate_types=( ${(z)${(f)"$(_call_program crate_types rustc --help)"/(#b)*'--crate-type ['([a-z-|]##)']'*/${match[1]}}//|/ } )

    _values -s ',' 'crate type' $crate_types
}

_rustc_emit_types() {
    local -a emit_types
    emit_types=( ${(z)${(f)"$(_call_program emit_types rustc --help)"/(#b)*'--emit ['([a-z-|]##)']'*/${match[1]}}//|/ } )

    _values -s ',' 'emit type' $emit_types
}

_rustc_print_info() {
    local -a print_types
    print_types=( ${(z)${(f)"$(_call_program print_types rustc --help)"/(#b)*'--print ['([a-z-|]##)']'*/${match[1]}}//|/ } )

    _values 'print type' $print_types
}

_rustc_target_triples() {
    local -a triples
    triples=( ${(z)$(_call_program triples rustc --print target-list)} )

    _values 'target triple' $triples
}

_rustc_extern_path() {
    # TODO: Add completion for path after `=`.
}

_rustc_lint_options() {
    local -a lints
    lints=( ${(f)"$(_call_program lints rustc -W help)"} )

    # Filter out non lint lines.
    lints=( ${(M)lints:#' '#[a-z-]##' '##(allow|warn|deny|forbid)' '##*} )
    # Escape `[` and `]`.
    lints=( ${${lints//'['/'\['}//']'/'\]'} )
    # Extract lint and description.
    lints=( ${lints/(#b)' '#([a-z-]##)' '##[a-z]##' '##(*)' '#/"${match[1]}[${match[2]}]"} )
    # Add help.
    lints+=( help )

    _values 'lint' $lints
}

_rustc_unstable_options() {
    local -a opts
    opts=( ${(f)"$(_call_program opts rustc -Z help)"} )

    # Filter out non option lines.
    opts=( ${(M)opts:#' '#'-Z'' '##*'--'*} )
    # Escape `[` and `]`.
    opts=( ${${opts//'['/'\['}//']'/'\]'} )
    # Extract option and description.
    opts=( ${opts/(#b)' '#'-Z'' '##([a-z-]##)'=val'' '##'--'' '##(*)' '#/"${match[1]}[${match[2]}]::val"} )
    # Add help.
    opts+=( help )

    # TODO: Add custom completions for known options.

    _values 'unstable option' $opts
}

_rustc_codegen_options() {
    local -a opts
    opts=( ${(f)"$(_call_program opts rustc -C help)"} )

    # Filter out non option lines.
    opts=( ${(M)opts:#' '#'-C'' '##*'--'*} )
    # Escape `[` and `]`.
    opts=( ${${opts//'['/'\['}//']'/'\]'} )

    # Extract option and description.
    local -A opts_map
    opts_map=( ${(z)opts/(#b)' '#'-C'' '##([a-z-]##)'=val'' '##'--'' '##(*)' '#/"${(q)match[1]} ${(q)match[2]}"} )

    # Excluded options.
    local -a exclude
    exclude=(
        'ar'
        'no-stack-check'
    )

    # Custom value functions for options.
    local -A val_map
    val_map=(
        'code-model'                '_rustc_code_models'
        'control-flow-guard'        '(yes no)'
        'debug-assertions'          '(yes no)'
        'debuginfo'                 '_rustc_debuginfo_levels'
        'default-linker-libraries'  '(yes no)'
        'embed-bitcode'             '(yes no)'
        'force-frame-pointer'       '(yes no)'
        'incremental'               '(yes no)'
        'link-dead-code'            '(yes no)'
        'link-self-contained'       '(yes no)'
        'linker-flavor'             '_rustc_linker_flavors'
        'lto'                       '_rustc_lto_levels'
        'no-prepopulate-passes'     '(yes no)'
        'no-redzone'                '(yes no)'
        'no-vectorize-loops'        '(yes no)'
        'no-vectorize-slp'          '(yes no)'
        'opt-level'                 '_rustc_opt_levels'
        'overflow-checks'           '(yes no)'
        'panic'                     '_rustc_panic_types'
        'prefer-dynamic'            '(yes no)'
        'relocation-model'          '_rustc_relocation_models'
        'rpath'                     '(yes no)'
        'save-temps'                '(yes no)'
        'soft-float'                '(yes no)'
        'target-cpu'                '_rustc_target_cpus'
        'target-feature'            '_rustc_target_features'
    )

    opts=()
    local opt desc val
    for opt desc in ${(kv)opts_map}; do
        if [[ "${exclude[(r)$opt]}" == "$opt" ]]; then
            continue
        fi

        val="${val_map[$opt]}"
        opts+=( "${opt}[${desc}]::val:$val" )
    done

    # Add help.
    opts+=( help )

    # TODO: Add custom completions for known options.

    _values 'codegen option' $opts
}

_rustc_code_models() {
    local -a models
    models=( ${(f)"$(_call_program models rustc --print code-models)"} )

    # Filter out first line.
    models=( ${models[@]:1} )
    # Extract models.
    models=( ${models/(#b)' '#([a-z-]##)' '#/${match[1]}} )

    _values 'code model' $models
}

_rustc_relocation_models() {
    local -a models
    models=( ${(f)"$(_call_program models rustc --print relocation-models)"} )

    # Filter out first line.
    models=( ${models[@]:1} )
    # Extract models.
    models=( ${models/(#b)' '#([a-z-]##)' '#/${match[1]}} )

    _values 'relocation model' $models
}

_rustc_target_cpus() {
    local -a cpus
    cpus=( ${(f)"$(_call_program cpus rustc --print target-cpus)"} )

    # Filter out first line.
    cpus=( ${cpus[@]:1} )
    # Extract cpus.
    cpus=( ${cpus/(#b)' '#([a-z-]##)' '#*/${match[1]}} )

    _values 'target cpu' $cpus
}

_rustc_target_features() {
    local -a features
    features=( ${(f)"$(_call_program features rustc --print target-features)"} )

    # Filter out non feature lines.
    features=( ${(M)features:#' '#[a-z-]##' '##'-'' '##*' '#} )
    # Extract features.
    features=( ${features/(#b)' '#([a-z-]##)' '##'-'' '##*' '#/${match[1]}} )

    local -a features2
    local feature
    for feature in $features; do
        features2+=( "(-${feature})+${feature}" "(+${feature})-${feature}" )
    done

    _values -s ',' 'target feature' $features2
}

_rustc_debuginfo_levels() {
    local -a levels
    levels=(
        '0[no debug info (default)]'
        '1[line tables only]'
        '2[full debug info with variable and type information]'
    )

    _values 'debuginfo level' $levels
}

_rustc_linker_flavors() {
    local -a flavors
    flavors=(
        'em[use Emscripten `emcc`]'
        'gcc[use the `cc` executable, typically `gcc` or `clang`]'
        'ld[use the `ld` executable]'
        'msvc[use the `link.exe` executable from Microsoft Visual Studio MSVC]'
        'ptx-linker[use `rust-ptx-linker` for Nvidia NVPTX GPGPU support]'
        'wasm-ld[use the `wasm-ld` executable, a port of LLVM `lld` for WebAssembly]'
        'ld64.lld[use the LLVM `lld` executable with the `-flavor darwin` for Apple'"'"'s `ld`]'
        'ld.lld[use the LLVM `lld` executable with the `-flavor gnu` for GNU binutils'"'"' `ld`]'
        'lld-link[use the LLVM `lld` executable with the `-flavor link` for Microsoft'"'"'s `link.exe`]'

    )

    _values 'linker flavor' $flavors
}

_rustc_lto_levels() {
    local yes no thin
    yes='perform "fat" LTO'
    no='disables LTO'
    thin='perform "thin" LTO'

    local -a levels
    levels=(
        "yes[$yes]"
        "fat[$yes]"
        "no[$no]"
        "thin[$thin]"
    )

    _values 'lto level' $levels
}

_rustc_opt_levels() {
    local -a levels
    levels=(
        '0[no optimizations, also turns on `cfg(debug_assertions)` (default)]'
        '1[basic optimizations]'
        '2[some optimizations]'
        '3[all optimizations]'
        's[optimize for binary size]'
        'z[optimize for binary size, but also turn off loop vectorization]'
    )

    _values 'opt level' $levels
}

_rustc_panic_types() {
    local -a panics
    panics=(
        'abort[terminate the process upon panic]'
        'unwind[unwind the stack upon panic]'
    )

    _values 'panic strategy' $panics
}

_rustc

